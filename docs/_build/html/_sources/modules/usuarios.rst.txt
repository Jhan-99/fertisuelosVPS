.. figure:: ../_static/carpeta.png
   :align: left
   
usuario
*******


:Descripción: 

.. code:: 
   
   CostosBaocadillo
   └── apps
          └── usuarios
              ├── __init__.py
              ├── admin.py
              ├── apps.py
              ├── migrations
              │   └── __init__.py
              ├── models.py
              ├── tests.py
              ├── views.py
              ├── forms.py
              └── urls.py
   
.. figure:: ../_static/carpeta.png
   :align: left
   
Migrations
==========
*Carpeta* : :mod:`migrations`


   Este es el directorio donde se almacenan todas las migraciones con las respectivas dependencias de sus modelos. Dentro de este archivo se encuentran los campos de la base de datos que establecimos en el archivo ``models.py`` con la respectiva característica del campo. Este archivo es generado con el comando ``makemigrations`` de Django y genera nuevas versiones con cada migración creada. 
   
       
       
.. figure:: ../_static/py.png
   :align: left

Models
======
*Archivo* : ``models.py``

.. note::

   Un modelo en Django es una clase importada de la biblioteca django.db que actúa como puente entre su base de datos y el servidor. Esta clase es una representación de la estructura de datos utilizada por su sitio web. Relacionará directamente esta estructura de datos con la base de datos. Para que no tenga que aprender SQL para la base de datos.
   
   
1. En primer lugar, se creo una nueva aplicación con el comando::

       django-admin startapp usuario
       
donde ``Propietarios`` es el nombre de la aplicación.

2. Después de crear la aplicación, debe instalarse en el proyecto. Para ello, se agregó la aplicación ``usuario`` a la lista ``INSTALLED_APPS`` en el archivo *settings.py*.

.. code-block:: python
   :emphasize-lines: 8
   
       INSTALLED_APPS = [
       'django.contrib.admin',
       'django.contrib.auth',
       'django.contrib.contenttypes',
       'django.contrib.sessions',
       'django.contrib.messages',
       'django.contrib.staticfiles',
       'apps.usuario',
       ]
       
       
3. El modelo de ``usuario`` es importado del ORM de Djago. .



4. Ahora ejecutaremos los comandos::

       > py manage.py makemigrations
       > py manage.py migrate

.. tip::

   Asegúrese de tener la base de datos conectada y de haber iniciado el servidor Apache y el servidor MySQL en la base de datos.
   
   
.. figure:: ../_static/py.png
   :align: left
   
Admin
=====
*Archivo* : ``admin.py``

Al registrar el  módelo ``Usuario`` con ``admin.site.register()``, Django puede construir una representación del formulario predeterminado.
Para poder registrar un modelo en el archivo :mod:`models.py` debemos importar el modelo con la función ``from`` y registrar el modelo con la sentencia ``admin.site.register()``:

.. code-block:: python
    
   from .models import Usuario       # Importar el modelo desde models.py

   admin.site.register(Usuario)       # (nombre del modelo creado en models.py) 
    
   
.. figure:: ../_static/py.png
   :align: left
   
   
Forms
=====
*Archivo* : ``forms.py``

En este archivo podremos crear los imputs para los campos de los formularios creados en html.

Lo bueno de los formularios de Django es que podemos definirlos desde cero o crear un ``ModelForm``, el cual guardará el resultado del formulario en el modelo. Para esto crearemos un formulario para nuestro modelo *Propietarios*.

Los formularios tienen su propio archivo: ``forms.py``.  Dentro de este archivo encontraremos el siguiente código:

.. code-block:: python

   from django.contrib.auth.forms import AuthenticationForm

   class Formulariologin(AuthenticationForm):
       def __init__(self, *args, **kwargs):
           super(Formulariologin, self).__init__(*args, **kwargs)
           self.fields['username'].widget.attrs['class'] = 'form-control'
           self.fields['username'].widget.attrs['placeholder'] = 'Nombre de Usuario'
           self.fields['password'].widget.attrs['class'] = 'form-control'
           self.fields['password'].widget.attrs['placeholder'] = 'Contraseña'  

Lo primero, necesitamos importar Django forms ``from django import forms`` y nuestro modelo *usuario* ``from .models import ..``.

``Formulariologin``, es el nombre de nuestro formulario. Necesitamos decirle a Django que este formulario es un ``Formulariologin`` así Django hará algo el resto por nosotros - ``forms.Formulariologin`` es responsable de ello.

Luego, tenemos ``class Meta``, donde le decimos a Django qué modelo debe ser utilizado para crear este formulario ``model = usuario``.


.. figure:: ../_static/py.png
   :align: left

Views
=====
*Archivo* : ``views.py``

:usuario:

.. admonition:: Importaciones

   .. code-block:: python
   
      from django.shortcuts import render, redirect, render_to_response
      from django.http import HttpResponse, HttpResponseRedirect
      from django.urls import reverse_lazy
      from django.utils.decorators import method_decorator
      from django.views.decorators.cache import never_cache
      from django.views.decorators.csrf import csrf_protect
      from django.views.generic.edit import FormView
      from django.contrib.auth import login,logout, authenticate
      from django.contrib import auth
      from .forms import Formulariologin
      from django.contrib.auth.models import User
      from apps.Propietarios.models import Propietarios


.. admonition:: Login usuario

   .. code-block:: python

      class Login(FormView):
          template_name = 'registration/login.html'
          form_class = Formulariologin
          success_url = reverse_lazy('index')
    
          @method_decorator(csrf_protect)
          @method_decorator(never_cache)
          def dispatch(self,request, *args, **kwargs):
              if request.user.is_authenticated:
                  return HttpResponseRedirect(self.get.success.url())
                  #return redirect ('index')
              else:
                  return super(Login,self).dispatch(request, *args, **kwargs)
        
          def form_valid(self, form):
              login(self.request,form.get_user())
              usuario = form.get_user()
              print("id del usuario " + str(usuario.id))
              self.request.session['user_id'] = usuario.id #asignar id del usuario a una sesión
              user_id = self.request.session.get('user_id')
              return super(Login,self).form_valid(form)

                
.. admonition:: logoutUsuario

   .. code-block:: python

      def logoutUsuario(request):
          logout(request)
          return HttpResponseRedirect('/login/')
          
          
.. admonition:: UserRegister

   .. code-block:: python

      def UserRegister(request):
          if request.method == "POST":
              first_name = request.POST.get('first_name') 
              last_name = request.POST.get('last_name') 
              username = request.POST.get('username')
              password = request.POST.get('password')
              user = User.objects.create_user(first_name=first_name, last_name=last_name, username=username, password=password)
              if user:
                  user_user = User.objects.filter(username = username)
                  for usu in user_user:
                      request.session['user_id'] = usu.id
                
              prop_full = first_name + " " + last_name
              user_id = request.session.get('user_id')
              propietario = Propietarios(nombre_pro = prop_full, user_id = user_id  , tel_pro = 0, cc_pro = 0) 
              propietario.save()  
              return redirect('login')
   
          else:
              #return HttpResponse("Conec =>")
              return render(request, 'registration/register.html')                     

          

.. figure:: ../_static/py.png
   :align: left
   
Urls
====
*Archivo* : ``urls.py``

.. code-block:: python
   
   from django.urls import path, re_path
   from django.contrib.auth.decorators import login_required
   from .views import UserRegister
   urlpatterns = [
       path('register/',UserRegister, name = 'register'),

       ]
 
 

Y añadiremos esta ruta al aquivo ``urls.py`` del directorio :mod:`costosbocadillo`:
 
 .. code-block:: python 
    
    urlpatterns = [
    
    path('login/',Login.as_view(), name='login'),
    path('logout/',login_required (logoutUsuario), name='logout')
    
    ]

   
.. figure:: ../_static/py.png
   :align: left
   
Apps
====
*Archivo* : ``apps.py``

Este archivo se crea para ayudar al usuario a incluir cualquier `configuración de aplicación <https://docs.djangoproject.com/en/dev/ref/applications/#application-configuration>`_ para la aplicación. Con esto, puede configurar algunos de los atributos de la aplicación:

.. code-block:: python 

   from django.apps import AppConfig

   class UsuarioConfig(AppConfig):
       name = 'usuario'